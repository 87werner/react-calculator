[{"/Users/thomaswerner/Desktop/codeNation/code-nation-projects/calculator-screen/calculator-app/src/App.js":"1","/Users/thomaswerner/Desktop/codeNation/code-nation-projects/calculator-screen/calculator-app/src/index.js":"2"},{"size":3704,"mtime":1606397575519,"results":"3","hashOfConfig":"4"},{"size":171,"mtime":1606299214229,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"99tpsy",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/thomaswerner/Desktop/codeNation/code-nation-projects/calculator-screen/calculator-app/src/App.js",["11"],"\nimport React from \"react\"\nimport \"./App.css\"\n // top do this\n // - display\n // - function buttons (*, -, /, *, +, = clear)\n // - number buttons (1,2,3,4......)\n\nclass App extends React.Component{\n  state = {\n      result: [],\n     keys: [\n        { value: \"clear\", styleName: \"clearButton\"},\n        { value: \"/\", styleName: \"operatorButton\"},\n        { value: \"7\", styleName: \"numberButton\"},\n        { value: \"8\", styleName: \"numberButton\"},\n        { value: \"9\", styleName: \"numberButton\"},\n        { value: \"*\", styleName: \"operatorButton\"},\n        { value: \"4\", styleName: \"numberButton\"},\n        { value: \"5\", styleName: \"numberButton\"},\n        { value: \"6\", styleName: \"numberButton\"},\n        { value: \"-\", styleName: \"operatorButton\"},\n        { value: \"1\", styleName: \"numberButton\"},\n        { value: \"2\", styleName: \"numberButton\"},\n        { value: \"3\", styleName: \"numberButton\"},\n        { value: \"+\", styleName: \"operatorButton\"},\n        { value: \"0\", styleName: \"zeroButton\"},\n        { value: \".\", styleName: \"operatorButton\"},\n        { value: \"=\", styleName: \"operatorButton\"},\n     ],\n  };\n\n  handleButton = (value) => {\n    if (value === \"clear\" ){\n      this.setState({result: []});\n    }else if(value === \"=\"){\n      this.setState({result: [eval(this.state.result.join(\"\"))]});\n    } else {\n      this.setState({result: [...this.state.result, value]});\n    }\n  };\n\n  render(){\n    const {result, keys} = this.state\n    return (\n          <div className=\"container\">\n            <h1 className =\"display\">{result.length === 0 ? \"0\" : result}</h1>\n            <div className =\"keyboard-container\">\n              {keys.map((key) => {\n                return (\n                  <button \n                      className={key.styleName}\n                      onClick={() => this.handleButton(key.value)}>\n                      {key.value}\n                  </button>\n                )\n              })}\n            </div>\n        </div>\n    )\n  }\n}\n\n\n\n\n\nexport default App;\n\n\n\n// handleClear = () => { //Both of these function have been summerised in the handlebutton Function with if() statements\n  //   this.setState({result: []})\n  // };\n  // handleEquals = ( ) => {\n  //   this.setState({result: [eval(this.state.result.join(\"\"))]})\n  // }\n\n// original this was in the return statement we change this to the state as set it key valuie pairs \n// {<button onClick={this.handleClear}>Clear</button>\n//             <button onClick = {() => this.handlButton(\"CE\")}>CE</button> \n//             <button onClick = {() => this.handlButton(\"%\")}>%</button> \n//             <button onClick = {() => this.handlButton(\"/\")}>รท</button> \n//             <button onClick = {() => this.handlButton(7)}>7</button> \n//             <button onClick = {() => this.handlButton(8)}>8</button> \n//             <button onClick = {() => this.handlButton(9)}>9</button> \n//             <button onClick = {() => this.handlButton(\"*\")}>X</button> \n//             <button onClick = {() => this.handlButton(4)}>4</button> \n//             <button onClick = {() => this.handlButton(5)}>5</button> \n//             <button onClick = {() => this.handlButton(6)}>6</button> \n//             <button onClick = {() => this.handlButton(\"-\")}>-</button> \n//             <button onClick = {() => this.handlButton(1)}>1</button> \n//             <button onClick = {() => this.handlButton(2)}>2</button> \n//             <button onClick = {() => this.handlButton(3)}>3</button> \n//             <button onClick = {() => this.handlButton(\"+\")}>+</button> \n//             <button onClick = {() => this.handlButton(0)}>0</button> \n//             <button>.</button>\n//             <button onClick = {this.handleEquals}>=</button> }","/Users/thomaswerner/Desktop/codeNation/code-nation-projects/calculator-screen/calculator-app/src/index.js",[],{"ruleId":"12","severity":1,"message":"13","line":37,"column":31,"nodeType":"14","messageId":"15","endLine":37,"endColumn":35},"no-eval","eval can be harmful.","CallExpression","unexpected"]